BUILDING(8)                 System Manager's Manual                BUILDING(8)

NAME
     BUILDING - Procedure for building NetBSD from source code

REQUIREMENTS
     NetBSD is designed to be buildable on most POSIX-compliant host systems.
     The basic build procedure is the same whether compiling natively (on the
     same NetBSD architecture) or cross compiling (on another architecture or
     OS).

     This source tree contains a special subtree, "tools", which uses the host
     system to create a build toolchain for the target architecture.  The host
     system must have at least C and C++ compilers in order to create the
     toolchain (make is not required); all other tools are created as part of
     the NetBSD build process.  (See the Environment variables section below
     if you need to override or manually select your compilers.)

FILES
   Source tree layout
     BUILDING       This document (in plaintext).  Generated from
                    doc/BUILDING.mdoc.

     Makefile       The main Makefile for NetBSD; should only be run for
                    native builds with an appropriately up-to-date version of
                    NetBSD make(1).  Intended for expert use with knowledge of
                    its shortcomings, it has been superseded by the build.sh
                    shell script as the recommended means for building NetBSD.

     UPDATING       Special notes for updating from an earlier revision of
                    NetBSD.  It is important to read this file before every
                    build of an updated source tree.

     build.sh       Bourne-compatible shell script used for building the host
                    build tools and the NetBSD system from scratch.  Can be
                    used for both native and cross builds, and should be used
                    instead of make(1) as it performs additional checks to
                    prevent common issues going undetected, such as building
                    with an outdated version of make(1).

     crypto/dist/, dist/, gnu/dist/
                    Sources imported verbatim from third parties, without
                    mangling the existing build structure.  Other source trees
                    in bin through usr.sbin use the NetBSD make(1) "reachover"
                    Makefile semantics when building these programs for a
                    native host.

     distrib/, etc/
                    Sources for items used when making a full release
                    snapshot, such as files installed in DESTDIR/etc on the
                    destination system, boot media, and release notes.

     doc/BUILDING.mdoc
                    This document, in -mdoc troff format; the original copy.
                    Used to generate BUILDING.

     external, sys/external
                    Sources and build infrastructure for components imported
                    (mostly) unchanged from upstream maintainers, sorted by
                    applicable license.  This is (slowly) replacing the
                    crypto/dist, dist, and gnu/dist directories.

     external/mit/xorg/
                    "Reachover" build structure for modular Xorg; the source
                    is in X11SRCDIR.

     regress/, tests/
                    Regression test harness.  Can be cross-compiled, but only
                    run natively.  tests/ uses the atf(7) test framework;
                    regress/ contains older tests that have not yet been
                    migrated to atf(7).

     sys/           NetBSD kernel sources.

     tools/         "Reachover" build structure for the host build tools.
                    This has a special method of determining out-of-date
                    status.

     tools/compat/README
                    Special notes for cross-hosting a NetBSD build on non-
                    NetBSD platforms.

     Other directories including bin/ ... usr.sbin/
                    Sources to the NetBSD userland (non-kernel) programs.  If
                    any of these directories are missing, they will be skipped
                    during the build.

   Build tree layout
     The NetBSD build tree is described in hier(7), and the release layout is
     described in release(7).

CONFIGURATION
   Environment variables
     Several environment variables control the behaviour of NetBSD builds.

     HOST_CC          Path name to C compiler used to create the toolchain.

     HOST_CFLAGS      Flags passed to the host C compiler.

     HOST_CXX         Path name to C++ compiler used to create the toolchain.

     HOST_CXXFLAGS    Flags passed to the host C++ compiler.

     HOST_SH          Path name to a shell available on the host system and
                      suitable for use during the build.  The NetBSD build
                      system requires a modern Bourne-like shell with POSIX-
                      compliant features, and also requires support for the
                      "local" keyword to declare local variables in shell
                      functions (which is a widely-implemented but non-
                      standardised feature).

                      Depending on the host system, a suitable shell may be
                      /bin/sh, /usr/xpg4/bin/sh, /bin/ksh (provided it is a
                      variant of ksh that supports the "local" keyword, such
                      as ksh88, but not ksh93), or /usr/local/bin/bash.

                      Most parts of the build require HOST_SH to be an
                      absolute path; however, build.sh allows it to be a
                      simple command name, which will be converted to an
                      absolute path by searching the PATH.

     INSTALLBOOT_UBOOT_PATHS
                      A colon-separated list of search paths used by
                      installboot(8) to find U-Boot packages.

     MACHINE          Machine type, e.g., "macppc".

     MACHINE_ARCH     Machine architecture, e.g., "powerpc".

     MAKE             Path name to invoke make(1) as.

     MAKECONF         The name of the make(1) configuration file.  See "make"
                      variables and mk.conf(5).

                      Note: Only settable in the process environment.

                      Default: "/etc/mk.conf"

     MAKEFLAGS        Flags to invoke make(1) with.

                      Note: build.sh ignores the value of MAKEFLAGS passed in
                      the environment, but allows MAKEFLAGS to be set via the
                      -V option.

     MAKEOBJDIR       Directory to use as the .OBJDIR for the current
                      directory.  The value is subjected to variable expansion
                      by make(1).  Typical usage is to set this variable to a
                      value involving the use of `${.CURDIR:S...}' or
                      `${.CURDIR:C...}', to derive the value of .OBJDIR from
                      the value of .CURDIR.  Used only if MAKEOBJDIRPREFIX is
                      not defined.

                      Note: MAKEOBJDIR can be provided only in the environment
                      or via the -O flag of build.sh; it cannot usefully be
                      set inside a Makefile, including in mk.conf(5) or
                      MAKECONF.

     MAKEOBJDIRPREFIX
                      Top level directory of the object directory tree.  The
                      value is subjected to variable expansion by make(1).
                      build.sh will create the ${MAKEOBJDIRPREFIX} directory
                      if necessary, but if make(1) is used without build.sh,
                      then rules in <bsd.obj.mk> will abort the build if the
                      ${MAKEOBJDIRPREFIX} directory does not exist.  If the
                      value is defined and valid, then
                      ${MAKEOBJDIRPREFIX}/${.CURDIR} is used as the .OBJDIR
                      for the current directory.  The current directory may be
                      read only.

                      Note: MAKEOBJDIRPREFIX can be provided only in the
                      environment or via the -M flag of build.sh; it cannot
                      usefully be set inside a Makefile, including in
                      mk.conf(5) or MAKECONF.

     TMPDIR           Top-level directory to store temporary directories used
                      by build.sh before paths to other directories such as
                      .OBJDIR can be determined.

                      Note: Must support execution of binaries.  I.e., without
                      mount(8)'s -o noexec option.

                      Default: "/tmp".

   "make" variables
     Several variables control the behavior of NetBSD builds.  Unless
     otherwise specified, these variables may be set in either the process
     environment or the make(1) configuration file mk.conf(5) specified by
     MAKECONF.

     This list is not comprehensive; all supported variables and their
     defaults are documented in mk.conf(5).

     BSDOBJDIR        The real path to the object directory tree for the
                      NetBSD source tree.

                      Default: "/usr/obj"

     BSDSRCDIR        The real path to the NetBSD source tree, if NETBSDSRCDIR
                      isn't defined.

                      Default: "/usr/src"

     BUILDID          Identifier for the build.  If set, this should be a
                      short string that is suitable for use as part of a file
                      or directory name.  The identifier will be appended to
                      object directory names, and can be consulted in the
                      make(1) configuration file in order to set additional
                      build parameters, such as compiler flags.  It will also
                      be used as part of the kernel version string, which can
                      be shown by "uname -v".

                      Default: Unset.

     BUILDINFO        Optional multi-line string containing information about
                      the build.  This will appear in DESTDIR/etc/release, and
                      it will be stored in the buildinfo variable in any
                      kernels that are built.  When such kernels are booted,
                      the sysctl(7) kern.buildinfo variable will report this
                      value.  The string may contain backslash escape
                      sequences, such as "\\" (representing a backslash
                      character) and "\n" (representing a newline).

                      Default: Unset.

     BUILDSEED        g++(1) uses random numbers when compiling C++ code.
                      This variable seeds the g++(1) random number generator
                      using -frandom-seed with this value.  By default, it is
                      set to "NetBSD-(majorversion)".  Using a fixed value
                      causes C++ binaries to be the same when built from the
                      same sources, resulting in identical (reproducible)
                      builds.  Additional information is available in the
                      g++(1) documentation of -frandom-seed.

                      Default: Unset.

     CPUFLAGS         Additional flags to the compiler/assembler to select CPU
                      instruction set options, CPU tuning options, etc.

                      Default: Unset.

     DESTDIR          Directory to contain the built NetBSD system.  If set,
                      special options are passed to the compilation tools to
                      prevent their default use of the host system's
                      /usr/include, /usr/lib, and so forth.  This pathname
                      must be an absolute path, and should not end with a
                      slash (/) character.  (For installation into the
                      system's root directory, set DESTDIR to an empty string,
                      not to "/").  The directory must reside on a file system
                      which supports long file names and hard links.

                      Note: build.sh will provide a default of destdir.MACHINE
                      (in the top-level .OBJDIR) unless run in `expert' mode.

                      Default: Empty string if USETOOLS is "yes"; unset
                      otherwise.

     EXTERNAL_TOOLCHAIN
                      If defined, this variable indicates the root directory
                      of an external toolchain which will be used to build the
                      tree.  For example, if a platform is a TOOLCHAIN_MISSING
                      platform, EXTERNAL_TOOLCHAIN can be used to re-enable
                      the cross-compile framework.

                      If EXTERNAL_TOOLCHAIN is defined, act as MKGCC=no, since
                      the external version of the compiler may not be able to
                      build the library components of the in-tree compiler.

                      This variable should be used in conjunction with an
                      appropriate HAVE_GCC or HAVE_LLVM setting to control the
                      compiler flags.

                      Note: This variable is not yet used in as many places as
                      it should be.  Expect the exact semantics of this
                      variable to change in the short term as parts of the
                      cross-compile framework continue to be cleaned up.

                      Default: Unset.

     MAKEVERBOSE      Level of verbosity of status messages.  Supported
                      values:

                      0   No descriptive messages or commands executed by
                          make(1) are shown.

                      1   Brief messages are shown describing what is being
                          done, but the actual commands executed by make(1)
                          are not shown.

                      2   Descriptive messages are shown as above (prefixed
                          with a `#'), and ordinary commands performed by
                          make(1) are shown.

                      3   In addition to the above, all commands performed by
                          make(1) are shown, even if they would ordinarily
                          have been hidden through use of the "@" prefix in
                          the relevant makefile.

                      4   In addition to the above, commands executed by
                          make(1) are traced through use of the sh(1) "-x"
                          flag.

                      Default: 2

     MKCATPAGES       Can be set to "yes" or "no".  Indicates whether
                      preformatted plaintext manual pages will be created and
                      installed.

                      Forced to "no" if MKMAN=no or MKSHARE=no.

                      Default: "no"

     MKCROSSGDB       Can be set to "yes" or "no".  Create a cross-gdb as a
                      host tool.

                      Default: "no"

     MKDEBUG          Can be set to "yes" or "no".  Indicates whether debug
                      information should be generated for all userland
                      binaries.  The result is collected as an additional
                      debug.tgz and xdebug.tgz set and installed in
                      DESTDIR/usr/libdata/debug.

                      Forced to "no" if NODEBUG is defined, usually in the
                      Makefile before any make(1) .include directives.

                      Default: "no"

     MKDEBUGKERNEL    Can be set to "yes" or "no".  Indicates whether
                      debugging symbols will be built for kernels by default;
                      pretend as if makeoptions DEBUG="-g" is specified in
                      kernel configuration files.  This will also put the
                      debug kernel netbsd.gdb in the kernel sets.  See
                      options(4) for details.  This is useful if a cross-gdb
                      is built as well (see MKCROSSGDB).

                      Default: "no"

     MKDEBUGLIB       Can be set to "yes" or "no".  Indicates whether debug
                      libraries (lib*_g.a) will be built and installed.  Debug
                      libraries are compiled with "-g -DDEBUG".

                      Forced to "no" if NODEBUGLIB is defined, usually in the
                      Makefile before any make(1) .include directives.

                      Default: "no"

     MKDEBUGTOOLS     Can be set to "yes" or "no".  Indicates whether debug
                      information (lib*_g.a) will be included in the build
                      toolchain.

                      Default: "no"

     MKDOC            Can be set to "yes" or "no".  Indicates whether system
                      documentation destined for DESTDIR/usr/share/doc will be
                      installed.

                      Forced to "no" if NODOC is defined, usually in the
                      Makefile before any make(1) .include directives.

                      Forced to "no" if MKSHARE=no.

                      Default: "yes"

     MKHOSTOBJ        Can be set to "yes" or "no".  If set to "yes", then for
                      programs intended to be run on the compile host, the
                      name, release, and architecture of the host operating
                      system will be suffixed to the name of the object
                      directory created by "make obj".  (This allows multiple
                      host systems to compile NetBSD for a single target.)  If
                      set to "no", then programs built to be run on the
                      compile host will use the same object directory names as
                      programs built to be run on the target.

                      Default: "no"

     MKHTML           Can be set to "yes" or "no".  Indicates whether the HTML
                      manual pages are created and installed.  and installed

                      Forced to "no" if NOHTML is defined, usually in the
                      Makefile before any make(1) .include directives.

                      Forced to "no" if MKMAN=no or MKSHARE=no.

                      Default: "yes"

     MKINFO           Can be set to "yes" or "no".  Indicates whether GNU Info
                      files, used for the documentation for most of the
                      compilation tools, will be built and installed.

                      Forced to "no" if NOINFO is defined, usually in the
                      Makefile before any make(1) .include directives.

                      Forced to "no" if MKSHARE=no.

                      Default: "yes"

     MKKDEBUG         Deprecated, use MKDEBUGKERNEL.

     MKKMOD           Can be set to "yes" or "no".  Indicates whether kernel
                      modules are built and installed.

                      Default: "no" on or1k; "yes" on other platforms.

     MKLINKLIB        Can be set to "yes" or "no".  Indicates whether all of
                      the shared library infrastructure will be built and
                      installed.  If "no", prevents: installation of the *.a
                      libraries, installation of the *_pic.a libraries on PIC
                      systems, building of *.a libraries on PIC systems, or
                      installation of .so symlinks on ELF systems.

                      Forced to "no" if NOLINKLIB is defined, usually in the
                      Makefile before any make(1) .include directives.

                      If "no", acts as MKLINT=no MKPICINSTALL=no MKPROFILE=no.

                      Default: "yes"

     MKLINT           Can be set to "yes" or "no".  Indicates whether lint(1)
                      will be run against portions of the NetBSD source code
                      during the build, and whether lint libraries will be
                      installed into DESTDIR/usr/libdata/lint.

                      Forced to "no" if NOLINT is defined, usually in the
                      Makefile before any make(1) .include directives.

                      Forced to "no" if MKLINKLIB=no.

                      Default: "no"

     MKMAN            Can be set to "yes" or "no".  Indicates whether manual
                      pages will be installed.

                      Forced to "no" if NOMAN is defined, usually in the
                      Makefile before any make(1) .include directives.

                      Forced to "no" if MKSHARE=no.

                      If "no", acts as MKCATPAGES=no MKHTML=no.

                      Default: "yes"

     MKNLS            Can be set to "yes" or "no".  Indicates whether Native
                      Language System (NLS) locale zone files will be built
                      and installed.

                      Forced to "no" if NONLS is defined, usually in the
                      Makefile before any make(1) .include directives.

                      Forced to "no" if MKSHARE=no.

                      Default: "yes"

     MKOBJ            Can be set to "yes" or "no".  Indicates whether object
                      directories will be created when running "make obj".  If
                      set to "no", then all built files will be located inside
                      the regular source tree.

                      Forced to "no" if NOOBJ is defined, usually in the
                      Makefile before any make(1) .include directives.

                      If "no", acts as MKOBJDIRS=no.

                      Note: Setting MKOBJ to "no" is not recommended and may
                      cause problems when updating the tree with cvs(1).

                      Default: "yes"

     MKOBJDIRS        Can be set to "yes" or "no".  Indicates whether object
                      directories will be created automatically (via a "make
                      obj" pass) at the start of a build.

                      Forced to "no" if MKOBJ=no.

                      Default: "no"

     MKPIC            Can be set to "yes" or "no".  Indicates whether shared
                      objects and libraries will be created and installed.  If
                      "no", the entire built system will be statically linked.

                      Forced to "no" if NOPIC is defined, usually in the
                      Makefile before any make(1) .include directives.

                      If "no", acts as MKPICLIB=no.

                      Default: "no" on m68000; "yes" on other platforms.

     MKPICINSTALL     Can be set to "yes" or "no".  Indicates whether the
                      ar(1) format libraries (lib*_pic.a), used to generate
                      shared libraries, are installed.

                      Forced to "no" if NOPICINSTALL is defined, usually in
                      the Makefile before any make(1) .include directives.

                      Forced to "no" if MKLINKLIB=no.

                      Default: "no"

     MKPROFILE        Can be set to "yes" or "no".  Indicates whether profiled
                      libraries (lib*_p.a) will be built and installed.

                      Forced to "no" if NOPROFILE is defined, usually in the
                      Makefile before any make(1) .include directives.

                      Forced to "no" if MKLINKLIB=no.

                      Default: "no" on or1k, riscv32, and riscv64 (due to
                      toolchain problems with profiled code); "yes" on other
                      platforms.

     MKREPRO          Can be set to "yes" or "no".  Indicates whether builds
                      are to be reproducible.  If "yes", two builds from the
                      same source tree will produce the same build results.

                      Used as the default for MKARZERO.

                      This may be set to "yes" by giving build.sh the -P
                      option.

                      Default: "no" Can be set to "yes" or "no".

     MKREPRO_TIMESTAMP
                      Unix timestamp.  When MKREPRO is set, the timestamp of
                      all files in the sets will be set to this value.

                      This may be set automatically to the latest source tree
                      timestamp using cvslatest(1) by giving build.sh the -P
                      option.

                      Default: Unset.

     MKSHARE          Can be set to "yes" or "no".  Indicates whether files
                      destined to reside in DESTDIR/usr/share will be built
                      and installed.

                      Forced to "no" if NOSHARE is defined, usually in the
                      Makefile before any make(1) .include directives.

                      If "no", acts as MKCATPAGES=no MKDOC=no MKINFO=no
                      MKHTML=no MKMAN=no MKNLS=no.

                      Default: "yes"

     MKSTRIPIDENT     Can be set to "yes" or "no".  Indicates whether RCS IDs,
                      for use with ident(1), should be stripped from program
                      binaries and shared libraries.

                      Default: "no"

     MKSTRIPSYM       Can be set to "yes" or "no".  Indicates whether all
                      local symbols should be stripped from shared libraries.
                      If "yes", strip all local symbols from shared libraries;
                      the affect is equivalent to the -x option of ld(1).  If
                      "no", strip only temporary local symbols; the affect is
                      equivalent to the -X option of ld(1).  Keeping non-
                      temporary local symbols such as static function names is
                      useful on using DTrace for userland libraries and
                      getting a backtrace from a rump kernel loading shared
                      libraries.

                      Default: "yes"

     MKUNPRIVED       Can be set to "yes" or "no".  Indicates whether an
                      unprivileged install will occur.  The user, group,
                      permissions, and file flags, will not be set on the
                      installed items; instead the information will be
                      appended to a file called METALOG in DESTDIR.  The
                      contents of METALOG are used during the generation of
                      the distribution tar files to ensure that the
                      appropriate file ownership is stored.

                      Default: "no"

     MKUPDATE         Can be set to "yes" or "no".  Indicates whether all
                      install operations intended to write to DESTDIR will
                      compare file timestamps before installing, and skip the
                      install phase if the destination files are up-to-date.

                      Note: This also has implications on full builds (see
                      next subsection).

                      Default: "no"

     MKX11            Can be set to "yes" or "no".  Indicates whether X11 is
                      built and installed from X11SRCDIR.

                      Default: "no"

     NETBSDSRCDIR     The path to the top level of the NetBSD sources.

                      Default: Top level of the NetBSD source tree (as
                      determined by the presence of build.sh and tools/) if
                      make(1) is run from within that tree; otherwise
                      BSDSRCDIR will be used.

     TOOLCHAIN_MISSING
                      Can be set to "yes" or "no".  If not "no", this
                      indicates that the platform "MACHINE_ARCH" being built
                      does not have a working in-tree toolchain.

                      If not "no", acts as MKBINUTILS=no MKGCC=no MKGDB=no.

                      Default: "no"

     TOOLDIR          Directory to hold the host tools, once built.  If
                      specified, must be an absolute path.  This directory
                      should be unique to a given host system and NetBSD
                      source tree.  (However, multiple targets may share the
                      same TOOLDIR; the target-dependent files have unique
                      names.)  If unset, a default based on the uname(1)
                      information of the host platform will be created in the
                      .OBJDIR of src.

                      Default: Unset.

     USETOOLS         Can be set to "yes" or "no".  Indicates whether the
                      tools specified by TOOLDIR should be used as part of a
                      build in progress.  Must be set to "yes" if cross-
                      compiling.

                      yes    Use the tools from TOOLDIR.

                      no     Do not use the tools from TOOLDIR, but refuse to
                             build native compilation tool components that are
                             version-specific for that tool.

                      never  Do not use the tools from TOOLDIR, even when
                             building native tool components.  This is similar
                             to the traditional NetBSD build method, but does
                             not verify that the compilation tools in use are
                             up-to-date enough in order to build the tree
                             successfully.  This may cause build or runtime
                             problems when building the whole NetBSD source
                             tree.

                      Default: "no" when using <bsd.*.mk> outside the NetBSD
                      source tree (detected automatically) or if
                      TOOLCHAIN_MISSING=yes; "yes" otherwise.

     X11SRCDIR        Directory containing the modular Xorg source.  If
                      specified, must be an absolute path.  The main modular
                      Xorg source is found in X11SRCDIR/external/mit.

                      Default: NETBSDSRCDIR/../xsrc, if that exists; otherwise
                      /usr/xsrc.

   "make" variables for full builds
     These variables only affect the top level "Makefile" and do not affect
     manually building subtrees of the NetBSD source code.

     INSTALLBOOT_BOARDS
                      A list of boards to create bootable images for.  If
                      corresponding U-Boot packages are installed, bootable
                      images are created as part of a release.  See the
                      -o board=name option of installboot(8).

     INSTALLWORLDDIR  Location for the "make installworld" target to install
                      to.  If specified, must be an absolute path.

                      Default: "/"

     MKOBJDIRS        Can be set to "yes" or "no".  Indicates whether object
                      directories will be created automatically (via a "make
                      obj" pass) at the start of a build.

                      Default: "no"

                      If using build.sh, the default is "yes".  This may be
                      set back to "no" by giving build.sh the -o option.

     MKUPDATE         Can be set to "yes" or "no".  If set, then in addition
                      to the effects described for MKUPDATE=yes above, this
                      implies the effects of NOCLEANDIR (i.e., "make cleandir"
                      is avoided).

                      Default: "no"

                      If using build.sh, this may be set by giving the -u
                      option.

     NBUILDJOBS       Now obsolete.  Use the make(1) option -j, instead.  See
                      below.

                      Default: Unset.

     NOCLEANDIR       If set, avoids the "make cleandir" phase of a full
                      build.  This has the effect of allowing only changed
                      files in a source tree to be recompiled.  This can speed
                      up builds when updating only a few files in the tree.

                      Default: Unset.

                      See also MKUPDATE.

     NODISTRIBDIRS    If set, avoids the "make distrib-dirs" phase of a full
                      build.  This skips running mtree(8) on DESTDIR, useful
                      on systems where building as an unprivileged user, or
                      where it is known that the system-wide mtree files have
                      not changed.

                      Default: Unset.

     NOINCLUDES       If set, avoids the "make includes" phase of a full
                      build.  This has the effect of preventing make(1) from
                      thinking that some programs are out-of-date simply
                      because the system include files have changed.  However,
                      this option should not be used when updating the entire
                      NetBSD source tree arbitrarily; it is suggested to use
                      MKUPDATE=yes instead in that case.

                      Default: Unset.

     RELEASEDIR       If set, specifies the directory to which a release(7)
                      layout will be written at the end of a "make release".
                      If specified, must be an absolute path.

                      Note: build.sh will provide a default of releasedir (in
                      the top-level .OBJDIR) unless run in `expert' mode.

                      Default: Unset.

BUILDING
   "make" command line options
     This is not a summary of all the options available to make(1); only the
     options used most frequently with NetBSD builds are listed here.

     -j njob    Run up to njob make(1) subjobs in parallel.  Makefiles should
                use .WAIT or have explicit dependencies as necessary to
                enforce build ordering.

     -m dir     Specify the default directory for searching for system
                Makefile segments, mainly the <bsd.*.mk> files.  When building
                any full NetBSD source tree, this should be set to the
                "share/mk" directory in the source tree.  This is set
                automatically when building from the top level, or when using
                build.sh.

     -n         Show the commands that would have been executed, but do not
                actually execute them.  This will still cause recursion to
                take place.

     -V var     Show make(1)'s idea of the value of var.  Does not build any
                targets.

     var=value  Set the variable var to value, overriding any setting
                specified by the process environment, the MAKECONF
                configuration file, or the system Makefile segments.

   "make" targets
     These default targets may be built by running make(1) in any subtree of
     the NetBSD source code.  It is recommended that none of these be used
     from the top level Makefile; as a specific exception, "make obj" and
     "make cleandir" are useful in that context.

     all        Build programs, libraries, and preformatted documentation.

     clean      Remove program and library object code files.

     cleandir   Same as clean, but also remove preformatted documentation,
                dependency files generated by "make depend", and any other
                files known to be created at build time.

     depend     Create dependency files (.depend) containing more detailed
                information about the dependencies of source code on header
                files.  Allows programs to be recompiled automatically when a
                dependency changes.

     dependall  Does a "make depend" immediately followed by a "make all".
                This improves cache locality of the build since both passes
                read the source files in their entirety.

     distclean  Synonym for cleandir.

     includes   Build and install system header files.  Typically needed
                before any system libraries or programs can be built.

     install    Install programs, libraries, and documentation into DESTDIR.
                Few files will be installed to DESTDIR/dev, DESTDIR/etc,
                DESTDIR/root or DESTDIR/var in order to prevent user supplied
                configuration data from being overwritten.

     lint       Run lint(1) against the C source code, where appropriate, and
                generate system-installed lint libraries.

     obj        Create object directories to be used for built files, instead
                of building directly in the source tree.

     tags       Create ctags(1) searchable function lists usable by the ex(1)
                and vi(1) text editors.

   "make" targets for the top level
     Additional make(1) targets are usable specifically from the top source
     level to facilitate building the entire NetBSD source tree.

     build         Build the entire NetBSD system (except the kernel).  This
                   orders portions of the source tree such that prerequisites
                   will be built in the proper order.

     distribution  Do a "make build", and then install a full distribution
                   (which does not include a kernel) into DESTDIR, including
                   files in DESTDIR/dev, DESTDIR/etc, DESTDIR/root and
                   DESTDIR/var.

     buildworld    As per "make distribution", except that it ensures that
                   DESTDIR is not the root directory.

     installworld  Install the distribution from DESTDIR to INSTALLWORLDDIR,
                   which defaults to the root directory.  Ensures that
                   INSTALLWORLDDIR is not the root directory if cross
                   compiling.

                   The INSTALLSETS environment variable may be set to a space-
                   separated list of distribution sets to be installed.  By
                   default, all sets except "etc" and "xetc" are installed, so
                   most files in INSTALLWORLDDIR/etc will not be installed or
                   modified.

                   Note: Before performing this operation with
                   INSTALLWORLDDIR=/, it is highly recommended that you
                   upgrade your kernel and reboot.  After performing this
                   operation, it is recommended that you use etcupdate(8) to
                   update files in INSTALLWORLDDIR/etc, and postinstall(8) to
                   check for or fix inconsistencies.

     sets          Create distribution sets from DESTDIR into
                   RELEASEDIR/RELEASEMACHINEDIR/binary/sets.  Should be run
                   after "make distribution", as "make build" alone does not
                   install all of the required files.

     sourcesets    Create source sets of the source tree into
                   RELEASEDIR/source/sets.

     syspkgs       Create syspkgs from DESTDIR into
                   RELEASEDIR/RELEASEMACHINEDIR/binary/syspkgs.  Should be run
                   after "make distribution", as "make build" alone does not
                   install all of the required files.

     release       Do a "make distribution", build kernels, distribution
                   media, and install sets (this as per "make sets"), and then
                   package the system into a standard release layout as
                   described by release(7).  This requires that RELEASEDIR be
                   set (see above).

     iso-image     Create a NetBSD installation CD-ROM image in the
                   RELEASEDIR/images directory.  The CD-ROM file system will
                   have a layout as described in release(7).

                   For most machine types, the CD-ROM will be bootable, and
                   will automatically run the sysinst(8) menu-based
                   installation program, which can be used to install or
                   upgrade a NetBSD system.  Bootable CD-ROMs also contain
                   tools that may be useful in repairing a damaged NetBSD
                   installation.

                   Before "make iso-image" is attempted, RELEASEDIR must be
                   populated by "make release" or equivalent.

                   Note: Other, smaller, CD-ROM images may be created in the
                   RELEASEDIR/RELEASEMACHINEDIR/installation/cdrom directory
                   by "make release".  These smaller images usually contain
                   the same tools as the larger images in RELEASEDIR/images,
                   but do not contain additional content such as the
                   distribution sets.

                   Note: The mac68k port still uses an older method of
                   creating CD-ROM images.  This requires the mkisofs(1)
                   utility, which is not part of NetBSD, but which can be
                   installed from pkgsrc/sysutils/cdrtools.

     iso-image-source
                   Create a NetBSD installation CD-ROM image in the
                   RELEASEDIR/images directory.  The CD-ROM file system will
                   have a layout as described in release(7).  It will have top
                   level directories for the machine type and source.

                   For most machine types, the CD-ROM will be bootable, and
                   will automatically run the sysinst(8) menu-based
                   installation program, which can be used to install or
                   upgrade a NetBSD system.  Bootable CD-ROMs also contain
                   tools that may be useful in repairing a damaged NetBSD
                   installation.

                   Before "make iso-image-source" is attempted, RELEASEDIR
                   must be populated by "make sourcesets release" or
                   equivalent.

                   Note: Other, smaller, CD-ROM images may be created in the
                   RELEASEDIR/RELEASEMACHINEDIR/installation/cdrom directory
                   by "make release".  These smaller images usually contain
                   the same tools as the larger images in RELEASEDIR/images,
                   but do not contain additional content such as the
                   distribution sets.

                   Note: The mac68k port still uses an older method of
                   creating CD-ROM images.  This requires the mkisofs(1)
                   utility, which is not part of NetBSD, but which can be
                   installed from pkgsrc/sysutils/cdrtools.

     install-image
                   Create a bootable NetBSD installation disk image in the
                   RELEASEDIR/images directory.  The installation disk image
                   is suitable for copying to bootable USB flash memory
                   sticks, etc., for machines which are able to boot from such
                   devices.  The file system in the bootable disk image will
                   have a layout as described in release(7).

                   The installation image is bootable, and will automatically
                   run the sysinst(8) menu-based installation program, which
                   can be used to install or upgrade a NetBSD system.  The
                   image also contains tools that may be useful in repairing a
                   damaged NetBSD installation.

                   Before "make install-image" is attempted, RELEASEDIR must
                   be populated by "make release" or equivalent.  The build
                   must have been performed with MKUNPRIVED=yes because "make
                   install-image" relies on information in DESTDIR/METALOG.

     live-image    Create NetBSD live images in the RELEASEDIR/images
                   directory.  The live image contains all necessary files to
                   boot NetBSD up to multi-user mode, including all files
                   which should be extracted during installation, NetBSD
                   disklabel, bootloaders, etc.

                   The live image is suitable for use as a disk image in
                   virtual machine environments such as QEMU, and also useful
                   to boot NetBSD from a USB flash memory stick on a real
                   machine, without the need for installation.

                   Before "make live-image" is attempted, RELEASEDIR must be
                   populated by "make release" or equivalent.  The build must
                   have been performed with MKUNPRIVED=yes because "make
                   install-image" relies on information in DESTDIR/METALOG.

     regression-tests
                   Can only be run after building the regression tests in the
                   directory "regress".  Runs those compiled regression tests
                   on the local host.

                   Note: Most tests are now managed instead using atf(7); this
                   target should probably run those as well but currently does
                   not.

   The "build.sh" script
     This script file is a shell script designed to build the entire NetBSD
     system on any host with a suitable modern shell and some common
     utilities.  The required shell features are described under the HOST_SH
     variable.

     If a host system's default shell does support the required features, then
     we suggest that you explicitly specify a suitable shell using a command
     like

           /path/to/suitable/shell build.sh [options]

     The above command will usually enable build.sh to automatically set
     HOST_SH=/path/to/suitable/shell, but if that fails, then the following
     set of commands may be used instead:

           HOST_SH=/path/to/suitable/shell
           export HOST_SH
           ${HOST_SH} build.sh [options]

     If build.sh detects that it is being executed under an unsuitable shell,
     it attempts to exec a suitable shell instead, or shows an error message.
     If HOST_SH is not set explicitly, then build.sh sets a default using
     heuristics dependent on the host platform, or from the shell under which
     build.sh is executed (if that can be determined), or using the first copy
     of sh found in PATH.

     All cross-compile builds, and most native builds, of the entire system
     should make use of build.sh rather than just running "make".  This way,
     the make(1) program will be bootstrapped properly, in case the host
     system has an older or incompatible "make" program.

     When compiling the entire system via build.sh, many make(1) variables are
     set for you in order to help encapsulate the build process.  In the list
     of options below, variables that are automatically set by build.sh are
     noted where applicable.

     The following operations are supported by build.sh:

     build         Build the system as per "make build".  Before the main part
                   of the build commences, this command runs the obj operation
                   (unless the -o option is given), "make cleandir" (unless
                   the -u option is given), and the tools operation.

     distribution  Build a full distribution as per "make distribution".  This
                   command first runs the build operation.

     release       Build a full release as per "make release".  This command
                   first runs the distribution operation.

     help          Show a help message, and exit.

     makewrapper   Create the nbmake-MACHINE wrapper.  This operation is
                   automatically performed for any of the other operations.

     cleandir      Perform "make cleandir".

     obj           Perform "make obj".

     tools         Build and install the host tools from src/tools.  This
                   command will first run "make obj" and "make cleandir" in
                   the tools subdirectory unless the -o or -u options
                   (respectively) are given.

     install=idir  Install the contents of DESTDIR to idir, using "make
                   installworld".

                   Note: Files that are part of the "etc" or "xetc" sets will
                   not be installed, unless overridden by the INSTALLSETS
                   environment variable.

     kernel=kconf  Build a new kernel.  The kconf argument is the name of a
                   configuration file suitable for use by config(1).  If kconf
                   does not contain any `/' characters, the configuration file
                   is expected to be found in the KERNCONFDIR directory, which
                   is typically sys/arch/MACHINE/conf.  The new kernel will be
                   built in a subdirectory of KERNOBJDIR, which is typically
                   sys/arch/MACHINE/compile or an associated object directory.

                   This command does not imply the tools command; run the
                   tools command first unless it is certain that the tools
                   already exist and are up to date.

                   This command will run "make cleandir" on the kernel in
                   question first unless the -u option is given.

     kernel.gdb=kconf
                   Build a new kernel with debug information.  Similar to the
                   above kernel=kconf operation, but creates a netbsd.gdb file
                   alongside of the kernel netbsd, which contains a full
                   symbol table and can be used for debugging (for example
                   with a cross-gdb built by MKCROSSGDB).

     kernels       This command will build all kernels defined in port
                   specific release build procedure.

                   This command internally calls the kernel=kconf operation
                   for each found kernel configuration file.

     modules       This command will build kernel modules and install them
                   into DESTDIR.

     releasekernel=kconf
                   Install a gzip(1)ed copy of the kernel previously built by
                   kernel=kconf into
                   RELEASEDIR/RELEASEMACHINEDIR/binary/kernel, usually as
                   netbsd-kconf.gz, although the "netbsd" prefix is determined
                   from the "config" directives in kconf.

     sets          Perform "make sets".

     sourcesets    Perform "make sourcesets".

     syspkgs       Perform "make syspkgs".

     iso-image     Perform "make iso-image".

     iso-image-source
                   Perform "make iso-image-source".

     install-image
                   Perform "make install-image".

     live-image    Perform "make live-image".

     list-arch     Show a list of valid MACHINE and MACHINE_ARCH settings, the
                   default MACHINE_ARCH for each MACHINE, and aliases for
                   MACHINE/MACHINE_ARCH pairs, and then exits.  The -m or -a
                   options (or both) may be used to specify glob patterns that
                   will be used to narrow the list of results; for example,
                   "build.sh -m 'evb*' -a '*arm*' list-arch" will list all
                   known MACHINE/MACHINE_ARCH values in which either MACHINE
                   or ALIAS matches the pattern `evb*', and MACHINE_ARCH
                   matches the pattern `*arm*'.

     The following command line options alter the behaviour of the build.sh
     operations described above:

     -a arch   Set the value of MACHINE_ARCH to arch.  See the -m option for
               more information.

     -B buildid
               Set the value of BUILDID to buildid.  This will also append the
               build identifier to the name of the "make" wrapper script so
               that the resulting name is of the form
               "nbmake-MACHINE-BUILDID".

     -C cdextras
               Append cdextras to the CDEXTRA variable, which is a space-
               separated list of files or directories that will be added to
               the CD-ROM image that may be create by the "iso-image" or
               "iso-image-source" operations.  Files will be added to the root
               of the CD-ROM image, whereas directories will be copied
               recursively.  If relative paths are specified, they will be
               converted to absolute paths before being used.  Multiple paths
               may be specified via multiple -C options, or via a single
               option whose argument contains multiple space-separated paths.

     -c compiler
               Select the compiler for the toolchain to build NetBSD and for
               inclusion in the NetBSD distribution.  Supported choices:

                     clang

                     gcc [default]

               The compiler used to build the toolchain can be different; see
               HOST_CC and HOST_CXX.

     -D dest   Set the value of DESTDIR to dest.  If a relative path is
               specified, it will be converted to an absolute path before
               being used.

     -E        Set `expert' mode.  This overrides various sanity checks, and
               allows: DESTDIR does not have to be set to a non-root path for
               builds, and MKUNPRIVED=yes does not have to be set when
               building as a non-root user.

               Note: It is highly recommended that you know what you are doing
               when you use this option.

     -h        Show a help message, and exit.

     -j njob   Run up to njob make(1) subjobs in parallel; passed through to
               make(1).  If you see failures for reasons other than running
               out of memory while using build.sh with -j, please save
               complete build logs so the failures can be analyzed.

               To achieve the fastest builds, -j values between (1 + the
               number of CPUs) and (2 * the number of CPUs) are recommended.
               Use lower values on machines with limited memory or I/O
               bandwidth.

     -M obj    Set MAKEOBJDIRPREFIX to obj.  Unsets MAKEOBJDIR.  See "-O obj"
               for more information.

               For instance, if the source directory is /usr/src, a setting of
               "-M /usr/obj" will place build-time files under
               /usr/obj/usr/src/bin, /usr/obj/usr/src/lib,
               /usr/obj/usr/src/usr.bin, and so forth.

               If a relative path is specified, it will be converted to an
               absolute path before being used.  build.sh imposes the
               restriction that the argument to the -M option must not begin
               with a "$" (dollar sign) character; otherwise it would be too
               difficult to determine whether the value is an absolute or a
               relative path.  If the directory does not already exist,
               build.sh will create it.

     -m mach   Set the value of MACHINE to mach, unless the mach argument is
               an alias that refers to a MACHINE/MACHINE_ARCH pair, in which
               case both MACHINE and MACHINE_ARCH are set from the alias.
               Such aliases are interpreted entirely by build.sh; they are not
               used by any other part of the build system.  The MACHINE_ARCH
               setting implied by mach will override any value of MACHINE_ARCH
               in the process environment, but will not override a value set
               by the -a option.  All cross builds require -m, but if unset on
               a NetBSD host, the host's value of MACHINE will be detected and
               used automatically.

               See the list-arch operation for a way to get a list of valid
               MACHINE and MACHINE_ARCH settings.

     -N noiselevel
               Set the "noisyness" level of the build, by setting MAKEVERBOSE
               to noiselevel.

     -n        Show the commands that would be executed by build.sh, but do
               not make any changes.  This is similar in concept to "make -n".

     -O obj    Create an appropriate transform macro for MAKEOBJDIR that will
               place the built object files under obj.  Unsets
               MAKEOBJDIRPREFIX.

               For instance, a setting of "-O /usr/obj" will place build-time
               files under /usr/obj/bin, /usr/obj/lib, /usr/obj/usr.bin, and
               so forth.

               If a relative path is specified, it will be converted to an
               absolute path before being used.  build.sh imposes the
               restriction that the argument to the -O option must not contain
               a "$" (dollar sign) character.  If the directory does not
               already exist, build.sh will create it.

               In normal use, exactly one of the -M or -O options should be
               specified.  If neither -M nor -O is specified, then a default
               object directory will be chosen according to rules in
               <bsd.obj.mk>.  Relying on this default is not recommended
               because it is determined by complex rules that are influenced
               by the values of several variables and by the location of the
               source directory.

               Note: Placing the obj directory location outside of the default
               source tree hierarchy makes it easier to manually clear out old
               files in the event the "make cleandir" operation is unable to
               do so.  (See CAVEATS below.)

               Note: The use of one of -M or -O is the only means of building
               multiple machine architecture userlands from the same source
               tree without cleaning between builds (in which case, one would
               specify distinct obj locations for each).

     -o        Set the value of MKOBJDIRS to "no".  Otherwise, it will be
               automatically set to "yes".  This default is opposite to the
               behaviour when not using build.sh.

     -P        Set the value of MKREPRO and MKREPRO_TIMESTAMP to the latest
               source CVS timestamp for reproducible builds.

     -R rel    Set the value of RELEASEDIR to rel.  If a relative path is
               specified, it will be converted to an absolute path before
               being used.

     -r        Remove the contents of DESTDIR and TOOLDIR before building
               (provides a clean starting point).  This will skip deleting
               DESTDIR if building on a native system to the root directory.

     -S seed   Change the value of BUILDSEED to seed.  This should rarely be
               necessary.

     -T tools  Set the value of TOOLDIR to tools.  If a relative path is
               specified, it will be converted to an absolute path before
               being used.  If set, the bootstrap "make" will only be rebuilt
               if the source files for make(1) have changed.

     -U        Set MKUNPRIVED=yes.

     -u        Set MKUPDATE=yes.

     -V var=[value]
               Set the environment variable var to an optional value.  This is
               propagated to the nbmake wrapper.

     -w wrapper
               Create the nbmake wrapper script (see below) in a custom
               location, specified by wrapper.  This allows, for instance, to
               place the wrapper in PATH automatically.

               Note: wrapper is the full name of the file, not just a
               directory name.  If a relative path is specified, it will be
               converted to an absolute path before being used.

     -X x11src
               Set the value of X11SRCDIR to x11src.  If a relative path is
               specified, it will be converted to an absolute path before
               being used.

     -x        Set MKX11=yes.

     -Z var    Unset ("zap") the environment variable var.  This is propagated
               to the nbmake wrapper.

     -?        Show a help message, and exit.

   The "nbmake-MACHINE" wrapper script
     If using the build.sh script to build NetBSD, a nbmake-MACHINE script
     will be created in TOOLDIR/bin upon the first build to assist in building
     subtrees on a cross-compile host.

     nbmake-MACHINE can be invoked in lieu of make(1), and will instead call
     the up-to-date version of "nbmake" installed into TOOLDIR/bin with
     several key variables pre-set, including MACHINE, MACHINE_ARCH, and
     TOOLDIR.  nbmake-MACHINE will also set variables specified with -V, and
     unset variables specified with -Z.

     This script can be symlinked into a directory listed in PATH, or called
     with an absolute path.

EXAMPLES
     1.   % ./build.sh [OPTIONS] tools kernel=GENERIC

          Build a new toolchain, and use the new toolchain to configure and
          build a new GENERIC kernel.

     2.   % ./build.sh [OPTIONS] -U distribution

          Using unprivileged mode, build a complete distribution to a DESTDIR
          directory that build.sh selects (and will show).

     3.   # ./build.sh [OPTIONS] -U install=/

          As root, install to / the distribution that was built by example 2.
          Even though this is run as root, -U is required so that the
          permissions stored in DESTDIR/METALOG are correctly applied to the
          files as they're copied to /.

     4.   % ./build.sh [OPTIONS] -U -u release

          Using unprivileged mode, build a complete release to DESTDIR and
          RELEASEDIR directories that build.sh selects (and will show).
          MKUPDATE=yes (-u) is set to prevent the "make cleandir", so that if
          this is run after example 2, it doesn't need to redo that portion of
          the release build.

OBSOLETE VARIABLES
     NBUILDJOBS  Use the make(1) option -j instead.

     USE_NEW_TOOLCHAIN
                 The new toolchain is now the default.  To disable, use
                 TOOLCHAIN_MISSING=yes.

SEE ALSO
     ar(1), config(1), ctags(1), cvs(1), cvslatest(1), ex(1), g++(1), gzip(1),
     ident(1), ld(1), lint(1), make(1), mkisofs(1), sh(1), uname(1), vi(1),
     options(4), mk.conf(5), atf(7), hier(7), release(7), sysctl(7),
     etcupdate(8), installboot(8), mount(8), mtree(8), postinstall(8),
     sysinst(8), pkgsrc/sysutils/cdrtools

HISTORY
     The build.sh based build scheme was introduced for NetBSD 1.6 as
     USE_NEW_TOOLCHAIN, and re-worked to TOOLCHAIN_MISSING after that.

CAVEATS
     After significant updates to third-party components in the source tree,
     the "make cleandir" operation may be insufficient to clean out old files
     in object directories.  Instead, one may have to manually remove the
     files.  Consult the UPDATING file for notices concerning this.

NetBSD                           June 4, 2023                           NetBSD
